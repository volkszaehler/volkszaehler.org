#!/usr/bin/env php
<?php
    require dirname(__DIR__) . '/app/config/bootstrap.php';

    $opts  = array(
        'f:'  => 'xml_configuration_file:',
        'd::' => 'snapshot_directory::',
        'e::' => 'sandbox_errors::',
        's::' => 'store_statistics::'
    );
    $options = getopt(implode(array_keys($opts)), array_values($opts));

    if ( isset($options['f']) ) {
        $xml_config = $options['f'];
    } elseif ( isset($options['xml_configuration_file']) ) {
        $xml_config = $options['xml_configuration_file'];
    } else {
        $xml_config = false;
    }
    if ( !$xml_config || !$xml_config = realpath($xml_config) ) {
        die(
            "A valid xml_configuration_file must be specified "
            . "[-f|--xml_configuration_file] for VPU to work.\n"
        );
    }

    $vpu = new \app\lib\VPU();

    if ( isset($options['e']) || isset($options['sandbox_errors']) ) {
        $sandbox_errors = true;
    } else {
        $sandbox_errors = \app\lib\Library::retrieve('sandbox_errors');
    }
    if ( $sandbox_errors ) {
        error_reporting(\app\lib\Library::retrieve('error_reporting'));
        set_error_handler(array($vpu, 'handle_errors'));
    }

    $results = $vpu->run_with_xml($xml_config);
    $results = $vpu->compile_suites($results, 'cli');

    if ( $sandbox_errors ) {
        restore_error_handler();
    }

    $suites = $results['suites'];
    $stats = $results['stats'];
    $errors = $vpu->get_errors();
    $to_view = compact('suites', 'stats', 'errors');

    if ( isset($options['d']) ) {
        $filename = $options['d'];
        $snapshot_error = '[-d]';
    } elseif ( isset($options['snapshot_directory']) ) {
        $filename = $options['snapshot_directory'];
        $snapshot_error = '[--snapshot_directory]';
    } else {
        $filename = \app\lib\Library::retrieve('snapshot_directory');
        $snapshot_error = 'the snapshot_directory in app/config/bootstrap.php';
    }
    $filename = realpath($filename) . '/' . date('Y-m-d_H-i') . '.html';

    $handle = @fopen($filename, 'a');
    if ( !$handle ) {
        die(
            "There was an error creating the snapshot.  Please ensure that "
            . "{$snapshot_error} exists and has the proper permissions.\n"
        );
    }

    $view = new \app\core\View();
    $contents = $view->render('partial/test_results', $to_view);

    fwrite($handle, $contents);
    fclose($handle);

    echo "Snapshot successfully created at {$filename}.\n";

    if ( isset($options['s']) || isset($options['store_statistics']) ) {
        $store_statistics = true;
    } else {
        $store_statistics = \app\lib\Library::retrieve('store_statistics');
    }
    if ( !$store_statistics ) {
        exit;
    }

    $db_options = \app\lib\Library::retrieve('db');
    $db = new $db_options['plugin']();
    if ( !$db->connect($db_options) ) {
        die(
            "There was an error connecting to the database:\n"
            . implode(' ', $db->get_errors()) . "\n"
        );
    }

    $now = date('Y-m-d H:i:s');
    foreach ( $stats as $key => $stat ) {
        $data = array(
            'run_date'   => $now,
            'failed'     => $stat['failed'],
            'incomplete' => $stat['incomplete'],
            'skipped'    => $stat['skipped'],
            'succeeded'  => $stat['succeeded']
        );
        $table = ucfirst(rtrim($key, 's')) . 'Result';
        if ( !$db->insert($table, $data) ) {
            die(
                "There was an error inserting a record into the database:\n"
                . implode(' ', $db->get_errors()) . "\n"
            );
        }
    }

    echo "The statistics generated during this test run were successfully "
        . "stored.\n";
?>
