sudo: false
language: php

php:
    - 7.1
    - 7.3
    - 7.4snapshot

services:
    - mysql

env:
  # run composer by default
  global:
    - TRAVIS_TEST_EXCLUDES="--exclude-group slow,pushserver"
    # docker credentials
    - secure: "j3ss+fkR/BCZuqZP0YUliq7+BUW26k7JdzMlPLwkKuvRJMWY24uizluy+2hsS9amM56wFgwTlTFa2gX2GO9VF4P6b6qIJ7ao0lii9LEowHTeZhfuaWvIdpFCvRyMUsDA/k5z4tqwECWhSTVbkEQica3p0JZYDzSDhsCkvPnSTpw="
    - secure: "e5qxaqWLnohr4At0ZW/yT/2i6Q9g2OVRwk0trqr13A0J7SeHN6Mxdc9H0U3KdLE4KkPa2pW52sYuLPAOCSfZFYae8q8HzIyAsWVSQQGBoEuSWVCfCu4Q4I2rydrSAYzadBPVm6MOoNsym/+fVb2sHTG8mX6nd/kf7AcWqb8AerM="
    - COMMIT=${TRAVIS_COMMIT::8}

  matrix:
    - DB=mysql

matrix:
  include:
    # postgres
    - php: 7.3
      services: postgresql
      env: DB=pgsql
    # sqlite
    - php: 7.3
      env: DB=sqlite
    # httpd-based
    - php: 7.3
      env: DB=mysql COMPONENT=HTTPD
    # push-server
    - php: 7.3
      env: DB=mysql COMPONENT=PUSHD
    # docker
    - php: 7.3
      env: DB=mysql COMPONENT=DOCKER
    # jslint-only
    - php: 7.3
      env: DB= JSLINT=true

# speedup build
cache:
  directories:
    - $COMPOSER_CACHE_DIR
    - $HOME/.composer/cache
    - node_modules

before_install:
    # disable xdebug for composer performance
    - if [ -e /home/travis/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ]; then rm /home/travis/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini; fi

install:
    - |
      if [ "$JSLINT" != true ]; then
        composer install
        # add apc cache
        phpenv config-add ./test/bin/apc.ini && printf "\n" | pecl install apcu
        php -r 'echo(function_exists("apcu_store")?"APCu enabled":"APCu disabled");'
      else
        npm install -g gulp
        npm install
      fi

before_script:
    # enable shell errors
    - set -e
    - cp etc/config.dist.yaml etc/config.yaml

    - DATABASE=volkszaehler
    - USER=root
    - PASSWORD=
    - if [ "$DB" = "pgsql" ]; then USER=postgres; fi

    # create config file
    - "sed -i \"s/driver: .*/driver: pdo_$DB/\" etc/config.yaml"
    - "sed -i \"s/user: .*/user: $USER/\" etc/config.yaml"
    - "sed -i \"s/password: .*/password: $PASSWORD/\" etc/config.yaml"
    - "sed -i \"s/dbname: .*/dbname: $DATABASE/\" etc/config.yaml"
    - cat etc/config.yaml

    # create database
    - if [ "$DB" = "mysql" ]; then mysql -e "CREATE DATABASE $DATABASE;" -u $USER; fi
    - if [ "$DB" = "pgsql" ]; then psql -c "CREATE DATABASE $DATABASE;" -U $USER; fi

    # create schema
    - if [ -n "$DB" ]; then php bin/doctrine orm:schema-tool:create; fi

    # start middleware service
    - |
      if [ "$COMPONENT" = "HTTPD" ]; then
        sed -i "s/testAdapter\" value=\".*\"/testAdapter\" value=\"HTTP\"/" phpunit.xml
        vendor/bin/ppm start -c etc/middleware.json &
      fi

    # push server tests
    - |
      if [ "$COMPONENT" = "PUSHD" ]; then
        php bin/push-server &
      fi

after_script:
    # stop middleware service
    - |
      if [ "$COMPONENT" = "HTTPD" ]; then
        vendor/bin/ppm stop -c etc/middleware.json
      fi

script:
    # run core tests
    - if [ -n "$DB" ]; then vendor/bin/phpunit $TRAVIS_TEST_EXCLUDES,aggregation; fi

    # run aggregation tests (mysql only)
    - |
      if [ "$DB" = "mysql" ]; then
        php bin/aggregate run -m delta -l hour
        vendor/bin/phpunit $TRAVIS_TEST_EXCLUDES
      fi

    # push server tests
    - if [ "$COMPONENT" = "PUSHD" ]; then vendor/bin/phpunit --group pushserver; fi

    # jslint javascript sources
    - if [ "$JSLINT" = true ]; then gulp jshint; fi

after_success:
    - |
      if [ "$COMPONENT" == "DOCKER" ] && [ "$TRAVIS_BRANCH" == "master" ] && [ "$DOCKER_USER" != "" ]; then
        docker login -u $DOCKER_USER -p $DOCKER_PASS
        export REPO=volkszaehler/volkszaehler
        docker pull $REPO:latest
        docker build --cache-from $REPO:latest -f Dockerfile -t $REPO:$COMMIT .
        docker tag $REPO:$COMMIT $REPO:latest
        docker push $REPO
      fi
