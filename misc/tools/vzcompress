#!/usr/bin/perl

#  @copyright Copyright (c) 2012, The volkszaehler.org project
#  @license http://www.opensource.org/licenses/gpl-license.php GNU Public License
#  Author Jakob Hirsch <jh.vz@plonk.de> 2012

#
#  This file is part of volkzaehler.org
# 
#  volkzaehler.org is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  any later version.
#
#  volkzaehler.org is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with volkszaehler.org. If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;
use Getopt::Std;
use DBI;
use POSIX;

###########################
# defaults
my $interval = 10;
my $dryrun;
my $debug;
my $tfmt = '%Y-%m-%d %H:%M:%S';

my $dbh;
my ($date1, $date2);
my ($start, $stop);


###########################

sub help() {
print <<EOF;
usage: $0 [-i <interval>] [-N] [-d] [-f <YYYYmmdd>|<ts>] [-t <YYYYmmdd|ts>] UUID [UUID ...]
-i: compression interval (${interval}s)
-N: dry run (don't actually change anything)
-d: debug (be more verbose)
-f: from date (midnight) or unix timestamp
-t: to date (midnight) or unix timestamp
EOF
exit 1;
}

sub date2ts($) {
	my $date = shift;
	my ($y, $m, $d);
	if ($date =~ /^\d{9,}$/) {
		warn "detected unix timestamp $date -> ", strftime($tfmt, localtime $date), "\n";
		return $date;
	} elsif (($y, $m, $d) = ($date =~ /^(\d\d\d\d)(\d\d)(\d\d)$/) or ($y, $m, $d) = ($date =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/)) {
		return mktime(0, 0, 0, $d, $m-1, $y-1900);
	} else {
		die "invalid date format '$date' (should be YYYYmmdd or unix timestamp)\n";
	}
}

sub compress($) {
	my $uuid = shift;

	$dbh->begin_work;
	my ($id) = $dbh->selectrow_array(q(SELECT id FROM entities WHERE uuid=?), undef, $uuid);
	my ($title) = $dbh->selectrow_array(q(SELECT value FROM properties WHERE entity_id=? AND pkey='title'), undef, $id);
	print "compressing $title (UUID $uuid, entity id $id)\n";
	my $sth = $dbh->prepare(q(SELECT timestamp, value FROM data WHERE channel_id=? AND timestamp>=? AND timestamp<?));
	$sth->execute($id, $start, $stop);

	my $cnt_in = 0;
	my $cnt_out = 0;
	my $sum_val = 0;
	my $t0 = $start;
	my $t1 = $t0 + $interval;
	my $tval = 0;
	my $cnt_tval = 0;
	my ($ts0, $ts, $val);
	my $cnt_compress = 0;

	printf "first interval: %s .. %s (%s .. %s)\n", $t0, $t1, strftime($tfmt, localtime($t0 / 1000)), strftime($tfmt, localtime($t1 / 1000))
		if $debug;
	my $interval_end = sub {
		# interval finished, compress
		if (defined $tval and defined $ts0) {
			printf "interval finished, insert val %.2f for ts %s (%s)\n", 
					$tval, $ts0, strftime($tfmt, localtime($ts0 / 1000))
				if $debug;
			++$cnt_out;
			$sum_val += $tval;
			if ($cnt_tval > 1 and not $dryrun) {
				$dbh->do(q(DELETE FROM data WHERE channel_id=? AND timestamp>=? AND timestamp <?), undef,
					$id, $t0, $t1);
				$dbh->do(q(INSERT INTO data (channel_id, timestamp, value) VALUES (?, ?, ?)), undef,
					$id, $ts0, $tval);
				++$cnt_compress;
			}
		}
		if (defined $ts) { # catch final run
			$t0 = $ts - ($ts % $interval);
			$t1 = $t0 + $interval;
			$tval = $val;
			$cnt_tval = 1;
			$ts0 = $ts;
			printf "next interval: %s .. %s (%s .. %s), tval %.2f\n", 
					$t0, $t1, strftime($tfmt, localtime($t0 / 1000)), strftime($tfmt, localtime($t1 / 1000)), $tval
				if $debug;
		}
	};
	# get values from database
	while (($ts, $val) = $sth->fetchrow_array) {
		printf "ts %s (%s) val %.2f\n", $ts, strftime($tfmt, localtime($ts / 1000)), $val
			if $debug;
		++$cnt_in;
		if ($ts < $t1) {
			# interval not finished, sum up values
			$tval += $val;
			# remember last timestamp of interval
			$ts0 = $ts;
			++$cnt_tval;
		} else {
			&$interval_end();
		}
	}
	&$interval_end();
	$dbh->commit;
	printf "%d values in, %d values out (%.1f%%). %d intervals compressed. value sum: %d\n",
		$cnt_in, $cnt_out, $cnt_in ? 100*$cnt_out/$cnt_in : 0, $cnt_compress, $sum_val;
}

# parse options
my %opts;
getopts('dNhi:f:t:', \%opts) or help();
if ($opts{'h'}) {
	help();
}
if ($opts{'i'}) {
	$interval = $opts{'i'};
}
if ($opts{'N'}) {
	$dryrun =1;
}
if ($opts{'d'}) {
	$debug = 1;
}
$date1 = $opts{'f'};
$date2 = $opts{'t'};

help() unless scalar @ARGV;

if ($date1) {
	$start = date2ts($date1);
} else {
	my (undef, undef, undef, $mday, $mon, $year) = localtime;
	$start = mktime(0, 0, 0, $mday-1, $mon, $year);
}
if ($date2) {
	if (my ($offs) = ($date2 =~ /^\+(\d+)$/)) {
		$stop = $start + $offs;
	} else {
		$stop = date2ts($date2);
	}
} else {
	my (undef, undef, undef, $mday, $mon, $year) = localtime $start;
	$stop = mktime(0, 0, 0, $mday+1, $mon, $year);
}

printf "compressing %s .. %s (%d .. %d) into %ds intervals\n",
	strftime($tfmt, localtime $start),
	strftime($tfmt, localtime $stop),
	$start, $stop, $interval;

# timestamps in ms
$start *= 1000;
$stop *= 1000;
$interval *= 1000;

$dbh = DBI->connect("DBI:mysql:database=vz;host=localhost", "vzuser", "vzpassword",
	{ RaiseError => 1, AutoCommit => 1 });

foreach my $uuid (@ARGV) {
	compress($uuid);
}

